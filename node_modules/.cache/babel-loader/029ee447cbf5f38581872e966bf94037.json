{"remainingRequest":"E:\\Code\\VsCode\\测试代码\\BeijingAgri\\node_modules\\babel-loader\\lib\\index.js!E:\\Code\\VsCode\\测试代码\\BeijingAgri\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\Code\\VsCode\\测试代码\\BeijingAgri\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Code\\VsCode\\测试代码\\BeijingAgri\\src\\components\\ThemePicker\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Code\\VsCode\\测试代码\\BeijingAgri\\src\\components\\ThemePicker\\index.vue","mtime":1536028147638},{"path":"E:\\Code\\VsCode\\测试代码\\BeijingAgri\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1537168178297},{"path":"E:\\Code\\VsCode\\测试代码\\BeijingAgri\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\Code\\VsCode\\测试代码\\BeijingAgri\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1537168178297},{"path":"E:\\Code\\VsCode\\测试代码\\BeijingAgri\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.replace\";\n\n//\n//\n//\n//\n//\n//\n//\nvar version = require('element-ui/package.json').version; // element-ui version from node_modules\n\n\nvar ORIGINAL_THEME = '#409EFF'; // default color\n\nexport default {\n  data: function data() {\n    return {\n      chalk: '',\n      // content of theme-chalk css\n      theme: ORIGINAL_THEME\n    };\n  },\n  watch: {\n    theme: function theme(val, oldVal) {\n      var _this = this;\n\n      if (typeof val !== 'string') return;\n      var themeCluster = this.getThemeCluster(val.replace('#', ''));\n      var originalCluster = this.getThemeCluster(oldVal.replace('#', ''));\n      console.log(themeCluster, originalCluster);\n\n      var getHandler = function getHandler(variable, id) {\n        return function () {\n          var originalCluster = _this.getThemeCluster(ORIGINAL_THEME.replace('#', ''));\n\n          var newStyle = _this.updateStyle(_this[variable], originalCluster, themeCluster);\n\n          var styleTag = document.getElementById(id);\n\n          if (!styleTag) {\n            styleTag = document.createElement('style');\n            styleTag.setAttribute('id', id);\n            document.head.appendChild(styleTag);\n          }\n\n          styleTag.innerText = newStyle;\n        };\n      };\n\n      var chalkHandler = getHandler('chalk', 'chalk-style');\n\n      if (!this.chalk) {\n        var url = \"https://unpkg.com/element-ui@\".concat(version, \"/lib/theme-chalk/index.css\");\n        this.getCSSString(url, chalkHandler, 'chalk');\n      } else {\n        chalkHandler();\n      }\n\n      var styles = [].slice.call(document.querySelectorAll('style')).filter(function (style) {\n        var text = style.innerText;\n        return new RegExp(oldVal, 'i').test(text) && !/Chalk Variables/.test(text);\n      });\n      styles.forEach(function (style) {\n        var innerText = style.innerText;\n        if (typeof innerText !== 'string') return;\n        style.innerText = _this.updateStyle(innerText, originalCluster, themeCluster);\n      });\n      this.$message({\n        message: '换肤成功',\n        type: 'success'\n      });\n    }\n  },\n  methods: {\n    updateStyle: function updateStyle(style, oldCluster, newCluster) {\n      var newStyle = style;\n      oldCluster.forEach(function (color, index) {\n        newStyle = newStyle.replace(new RegExp(color, 'ig'), newCluster[index]);\n      });\n      return newStyle;\n    },\n    getCSSString: function getCSSString(url, callback, variable) {\n      var _this2 = this;\n\n      var xhr = new XMLHttpRequest();\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n          _this2[variable] = xhr.responseText.replace(/@font-face{[^}]+}/, '');\n          callback();\n        }\n      };\n\n      xhr.open('GET', url);\n      xhr.send();\n    },\n    getThemeCluster: function getThemeCluster(theme) {\n      var tintColor = function tintColor(color, tint) {\n        var red = parseInt(color.slice(0, 2), 16);\n        var green = parseInt(color.slice(2, 4), 16);\n        var blue = parseInt(color.slice(4, 6), 16);\n\n        if (tint === 0) {\n          // when primary color is in its rgb space\n          return [red, green, blue].join(',');\n        } else {\n          red += Math.round(tint * (255 - red));\n          green += Math.round(tint * (255 - green));\n          blue += Math.round(tint * (255 - blue));\n          red = red.toString(16);\n          green = green.toString(16);\n          blue = blue.toString(16);\n          return \"#\".concat(red).concat(green).concat(blue);\n        }\n      };\n\n      var shadeColor = function shadeColor(color, shade) {\n        var red = parseInt(color.slice(0, 2), 16);\n        var green = parseInt(color.slice(2, 4), 16);\n        var blue = parseInt(color.slice(4, 6), 16);\n        red = Math.round((1 - shade) * red);\n        green = Math.round((1 - shade) * green);\n        blue = Math.round((1 - shade) * blue);\n        red = red.toString(16);\n        green = green.toString(16);\n        blue = blue.toString(16);\n        return \"#\".concat(red).concat(green).concat(blue);\n      };\n\n      var clusters = [theme];\n\n      for (var i = 0; i <= 9; i++) {\n        clusters.push(tintColor(theme, Number((i / 10).toFixed(2))));\n      }\n\n      clusters.push(shadeColor(theme, 0.1));\n      return clusters;\n    }\n  }\n};",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;AASA,IAAA,UAAA,QAAA,yBAAA,EAAA,OAAA,C,CAAA;;;AACA,IAAA,iBAAA,SAAA,C,CAAA;;AAEA,eAAA;AACA,MADA,kBACA;AACA,WAAA;AACA,aAAA,EADA;AACA;AACA,aAAA;AAFA,KAAA;AAIA,GANA;AAOA,SAAA;AACA,SADA,iBACA,GADA,EACA,MADA,EACA;AAAA;;AACA,UAAA,OAAA,GAAA,KAAA,QAAA,EAAA;AACA,UAAA,eAAA,KAAA,eAAA,CAAA,IAAA,OAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAAA;AACA,UAAA,kBAAA,KAAA,eAAA,CAAA,OAAA,OAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAAA;AACA,cAAA,GAAA,CAAA,YAAA,EAAA,eAAA;;AACA,UAAA,aAAA,SAAA,UAAA,CAAA,QAAA,EAAA,EAAA,EAAA;AACA,eAAA,YAAA;AACA,cAAA,kBAAA,MAAA,eAAA,CAAA,eAAA,OAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAAA;;AACA,cAAA,WAAA,MAAA,WAAA,CAAA,MAAA,QAAA,CAAA,EAAA,eAAA,EAAA,YAAA,CAAA;;AAEA,cAAA,WAAA,SAAA,cAAA,CAAA,EAAA,CAAA;;AACA,cAAA,CAAA,QAAA,EAAA;AACA,uBAAA,SAAA,aAAA,CAAA,OAAA,CAAA;AACA,qBAAA,YAAA,CAAA,IAAA,EAAA,EAAA;AACA,qBAAA,IAAA,CAAA,WAAA,CAAA,QAAA;AACA;;AACA,mBAAA,SAAA,GAAA,QAAA;AACA,SAXA;AAYA,OAbA;;AAeA,UAAA,eAAA,WAAA,OAAA,EAAA,aAAA,CAAA;;AAEA,UAAA,CAAA,KAAA,KAAA,EAAA;AACA,YAAA,6CAAA,OAAA,+BAAA;AACA,aAAA,YAAA,CAAA,GAAA,EAAA,YAAA,EAAA,OAAA;AACA,OAHA,MAGA;AACA;AACA;;AAEA,UAAA,SAAA,GAAA,KAAA,CAAA,IAAA,CAAA,SAAA,gBAAA,CAAA,OAAA,CAAA,EACA,MADA,CACA,iBAAA;AACA,YAAA,OAAA,MAAA,SAAA;AACA,eAAA,IAAA,MAAA,CAAA,MAAA,EAAA,GAAA,EAAA,IAAA,CAAA,IAAA,KAAA,CAAA,kBAAA,IAAA,CAAA,IAAA,CAAA;AACA,OAJA,CAAA;AAKA,aAAA,OAAA,CAAA,iBAAA;AAAA,YACA,SADA,GACA,KADA,CACA,SADA;AAEA,YAAA,OAAA,SAAA,KAAA,QAAA,EAAA;AACA,cAAA,SAAA,GAAA,MAAA,WAAA,CAAA,SAAA,EAAA,eAAA,EAAA,YAAA,CAAA;AACA,OAJA;AAKA,WAAA,QAAA,CAAA;AACA,iBAAA,MADA;AAEA,cAAA;AAFA,OAAA;AAIA;AA5CA,GAPA;AAsDA,WAAA;AACA,eADA,uBACA,KADA,EACA,UADA,EACA,UADA,EACA;AACA,UAAA,WAAA,KAAA;AACA,iBAAA,OAAA,CAAA,UAAA,KAAA,EAAA,KAAA,EAAA;AACA,mBAAA,SAAA,OAAA,CAAA,IAAA,MAAA,CAAA,KAAA,EAAA,IAAA,CAAA,EAAA,WAAA,KAAA,CAAA,CAAA;AACA,OAFA;AAGA,aAAA,QAAA;AACA,KAPA;AASA,gBATA,wBASA,GATA,EASA,QATA,EASA,QATA,EASA;AAAA;;AACA,UAAA,MAAA,IAAA,cAAA,EAAA;;AACA,UAAA,kBAAA,GAAA,YAAA;AACA,YAAA,IAAA,UAAA,KAAA,CAAA,IAAA,IAAA,MAAA,KAAA,GAAA,EAAA;AACA,iBAAA,QAAA,IAAA,IAAA,YAAA,CAAA,OAAA,CAAA,mBAAA,EAAA,EAAA,CAAA;AACA;AACA;AACA,OALA;;AAMA,UAAA,IAAA,CAAA,KAAA,EAAA,GAAA;AACA,UAAA,IAAA;AACA,KAnBA;AAqBA,mBArBA,2BAqBA,KArBA,EAqBA;AACA,UAAA,YAAA,SAAA,SAAA,CAAA,KAAA,EAAA,IAAA,EAAA;AACA,YAAA,MAAA,SAAA,MAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA;AACA,YAAA,QAAA,SAAA,MAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA;AACA,YAAA,OAAA,SAAA,MAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA;;AAEA,YAAA,SAAA,CAAA,EAAA;AAAA;AACA,iBAAA,CAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,CAAA,GAAA,CAAA;AACA,SAFA,MAEA;AACA,iBAAA,KAAA,KAAA,CAAA,QAAA,MAAA,GAAA,CAAA,CAAA;AACA,mBAAA,KAAA,KAAA,CAAA,QAAA,MAAA,KAAA,CAAA,CAAA;AACA,kBAAA,KAAA,KAAA,CAAA,QAAA,MAAA,IAAA,CAAA,CAAA;AAEA,gBAAA,IAAA,QAAA,CAAA,EAAA,CAAA;AACA,kBAAA,MAAA,QAAA,CAAA,EAAA,CAAA;AACA,iBAAA,KAAA,QAAA,CAAA,EAAA,CAAA;AAEA,4BAAA,GAAA,SAAA,KAAA,SAAA,IAAA;AACA;AACA,OAlBA;;AAoBA,UAAA,aAAA,SAAA,UAAA,CAAA,KAAA,EAAA,KAAA,EAAA;AACA,YAAA,MAAA,SAAA,MAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA;AACA,YAAA,QAAA,SAAA,MAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA;AACA,YAAA,OAAA,SAAA,MAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA;AAEA,cAAA,KAAA,KAAA,CAAA,CAAA,IAAA,KAAA,IAAA,GAAA,CAAA;AACA,gBAAA,KAAA,KAAA,CAAA,CAAA,IAAA,KAAA,IAAA,KAAA,CAAA;AACA,eAAA,KAAA,KAAA,CAAA,CAAA,IAAA,KAAA,IAAA,IAAA,CAAA;AAEA,cAAA,IAAA,QAAA,CAAA,EAAA,CAAA;AACA,gBAAA,MAAA,QAAA,CAAA,EAAA,CAAA;AACA,eAAA,KAAA,QAAA,CAAA,EAAA,CAAA;AAEA,0BAAA,GAAA,SAAA,KAAA,SAAA,IAAA;AACA,OAdA;;AAgBA,UAAA,WAAA,CAAA,KAAA,CAAA;;AACA,WAAA,IAAA,IAAA,CAAA,EAAA,KAAA,CAAA,EAAA,GAAA,EAAA;AACA,iBAAA,IAAA,CAAA,UAAA,KAAA,EAAA,OAAA,CAAA,IAAA,EAAA,EAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA;;AACA,eAAA,IAAA,CAAA,WAAA,KAAA,EAAA,GAAA,CAAA;AACA,aAAA,QAAA;AACA;AAhEA;AAtDA,CAAA","sourcesContent":["<template>\r\n  <el-color-picker\r\n    v-model=\"theme\"\r\n    class=\"theme-picker\"\r\n    popper-class=\"theme-picker-dropdown\"/>\r\n</template>\r\n\r\n<script>\r\n\r\nconst version = require('element-ui/package.json').version // element-ui version from node_modules\r\nconst ORIGINAL_THEME = '#409EFF' // default color\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      chalk: '', // content of theme-chalk css\r\n      theme: ORIGINAL_THEME\r\n    }\r\n  },\r\n  watch: {\r\n    theme(val, oldVal) {\r\n      if (typeof val !== 'string') return\r\n      const themeCluster = this.getThemeCluster(val.replace('#', ''))\r\n      const originalCluster = this.getThemeCluster(oldVal.replace('#', ''))\r\n      console.log(themeCluster, originalCluster)\r\n      const getHandler = (variable, id) => {\r\n        return () => {\r\n          const originalCluster = this.getThemeCluster(ORIGINAL_THEME.replace('#', ''))\r\n          const newStyle = this.updateStyle(this[variable], originalCluster, themeCluster)\r\n\r\n          let styleTag = document.getElementById(id)\r\n          if (!styleTag) {\r\n            styleTag = document.createElement('style')\r\n            styleTag.setAttribute('id', id)\r\n            document.head.appendChild(styleTag)\r\n          }\r\n          styleTag.innerText = newStyle\r\n        }\r\n      }\r\n\r\n      const chalkHandler = getHandler('chalk', 'chalk-style')\r\n\r\n      if (!this.chalk) {\r\n        const url = `https://unpkg.com/element-ui@${version}/lib/theme-chalk/index.css`\r\n        this.getCSSString(url, chalkHandler, 'chalk')\r\n      } else {\r\n        chalkHandler()\r\n      }\r\n\r\n      const styles = [].slice.call(document.querySelectorAll('style'))\r\n        .filter(style => {\r\n          const text = style.innerText\r\n          return new RegExp(oldVal, 'i').test(text) && !/Chalk Variables/.test(text)\r\n        })\r\n      styles.forEach(style => {\r\n        const { innerText } = style\r\n        if (typeof innerText !== 'string') return\r\n        style.innerText = this.updateStyle(innerText, originalCluster, themeCluster)\r\n      })\r\n      this.$message({\r\n        message: '换肤成功',\r\n        type: 'success'\r\n      })\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    updateStyle(style, oldCluster, newCluster) {\r\n      let newStyle = style\r\n      oldCluster.forEach((color, index) => {\r\n        newStyle = newStyle.replace(new RegExp(color, 'ig'), newCluster[index])\r\n      })\r\n      return newStyle\r\n    },\r\n\r\n    getCSSString(url, callback, variable) {\r\n      const xhr = new XMLHttpRequest()\r\n      xhr.onreadystatechange = () => {\r\n        if (xhr.readyState === 4 && xhr.status === 200) {\r\n          this[variable] = xhr.responseText.replace(/@font-face{[^}]+}/, '')\r\n          callback()\r\n        }\r\n      }\r\n      xhr.open('GET', url)\r\n      xhr.send()\r\n    },\r\n\r\n    getThemeCluster(theme) {\r\n      const tintColor = (color, tint) => {\r\n        let red = parseInt(color.slice(0, 2), 16)\r\n        let green = parseInt(color.slice(2, 4), 16)\r\n        let blue = parseInt(color.slice(4, 6), 16)\r\n\r\n        if (tint === 0) { // when primary color is in its rgb space\r\n          return [red, green, blue].join(',')\r\n        } else {\r\n          red += Math.round(tint * (255 - red))\r\n          green += Math.round(tint * (255 - green))\r\n          blue += Math.round(tint * (255 - blue))\r\n\r\n          red = red.toString(16)\r\n          green = green.toString(16)\r\n          blue = blue.toString(16)\r\n\r\n          return `#${red}${green}${blue}`\r\n        }\r\n      }\r\n\r\n      const shadeColor = (color, shade) => {\r\n        let red = parseInt(color.slice(0, 2), 16)\r\n        let green = parseInt(color.slice(2, 4), 16)\r\n        let blue = parseInt(color.slice(4, 6), 16)\r\n\r\n        red = Math.round((1 - shade) * red)\r\n        green = Math.round((1 - shade) * green)\r\n        blue = Math.round((1 - shade) * blue)\r\n\r\n        red = red.toString(16)\r\n        green = green.toString(16)\r\n        blue = blue.toString(16)\r\n\r\n        return `#${red}${green}${blue}`\r\n      }\r\n\r\n      const clusters = [theme]\r\n      for (let i = 0; i <= 9; i++) {\r\n        clusters.push(tintColor(theme, Number((i / 10).toFixed(2))))\r\n      }\r\n      clusters.push(shadeColor(theme, 0.1))\r\n      return clusters\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.theme-picker .el-color-picker__trigger {\r\n  vertical-align: middle;\r\n}\r\n\r\n.theme-picker-dropdown .el-color-dropdown__link-btn {\r\n  display: none;\r\n}\r\n</style>\r\n"],"sourceRoot":"src\\components\\ThemePicker"}]}